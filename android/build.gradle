import java.nio.file.Paths

// build.gradle based on:
// https://github.com/ammarahm-ed/react-native-jsi-template

buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  repositories {
    google()
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:4.2.2'
  }
}

apply plugin: 'com.android.library'

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['RNClusterer_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['RNClusterer_' + name]).toInteger()
}

def found = false
def reactNativeDir = null
def androidSourcesName = 'React Native sources'
def parentDir = rootProject.projectDir

if (rootProject.ext.has('reactNativeAndroidRoot')) {
  reactNativeDir = rootProject.ext.get('reactNativeAndroidRoot')
} else {
  reactNativeDir = new File(
          projectDir,
          '/../../../node_modules/react-native/android'
  )
}
if (reactNativeDir.exists()) {
  found = true
} else {
  1.upto(5, {
    if (found) return true
    parentDir = reactNativeDir.parentFile

    reactNativeDir = new File(
            parentDir,
            'node_modules/react-native/android'
    )

    if (reactNativeDir.exists()) {
      found = true
    }
  })
}

android {
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
  buildToolsVersion getExtOrDefault('buildToolsVersion')
  ndkVersion getExtOrDefault('ndkVersion')

  defaultConfig {
    minSdkVersion 21
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    versionCode 1
    versionName "1.0"

    externalNativeBuild {
        cmake {
            cppFlags "-O2 -frtti -fexceptions -Wall -fstack-protector-all", "-DONANDROID"
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            arguments  "-DANDROID_STL=c++_shared", "-DNODE_MODULES_DIR=${reactNativeDir.parentFile.parentFile.toString()}"
        }
    }

  }

  externalNativeBuild {
      cmake {
          path "CMakeLists.txt"
      }
  }

  lintOptions {
    disable 'GradleCompatible'
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    excludes = ["**/libc++_shared.so","**/libjsi.so","**/libreactnativejni.so","META-INF/MANIFEST.MF"]
  }

  configurations {
    extractJNI
  }
}

repositories {
  mavenCentral()
  jcenter()
  google()

  if (reactNativeDir.exists()) {
    maven {
      url reactNativeDir.toString()
      name androidSourcesName
    }
    logger.info(":${project.name}:reactNativeAndroidRoot ${reactNativeDir.canonicalPath}")
  }

  if (!found) {
    throw new GradleException(
            "${project.name}: unable to locate React Native android sources. " +
                    "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}

dependencies {
  //noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-native:+'

  def rnAAR = fileTree(reactNativeDir.toString()).matching({ it.include "**/**/*.aar" }).singleFile
  extractJNI(files(rnAAR))
}

task extractJNIFiles {

  doLast {
    configurations.extractJNI.files.each {
      def file = it.absoluteFile

      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "jni/**/*"
      }
    }
  }
}

task extractJNIFilesForRelease {

  doLast {
    configurations.extractJNI.files.each {
      def file = it.absoluteFile

      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "jni/**/*"
      }
    }
  }
}


tasks.whenTaskAdded { task ->
  if (task.name.contains('generateJsonModelDebug') || task.name.contains('externalNativeBuild')) {
    task.dependsOn(extractJNIFiles);
  }
  // workaround for builds failing in various ci
  if (task.name.contains('generateJsonModelRelease')) {
    task.dependsOn(extractJNIFilesForRelease)
  }
}
